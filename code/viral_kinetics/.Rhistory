ests[2,]*10
extract.samples(q4H2)
extract.samples(q4H1)
extract.samples(q4H1) %>% head
rnorm(1000, mean=post_samples$a + post_samples$b*46.95,sd=post_samples$sd)
post_samples <- extract.samples(q4H1)
rnorm(1000, mean=post_samples$a + post_samples$b*46.95,sd=post_samples$sd)
rnorm(1000, mean=post_samples$a + post_samples$b*46.95,sd=post_samples$sd) %>% hist
height1_samps <- rnorm(1000, mean=post_samples$a + post_samples$b*46.95,sd=post_samples$sd)
height1_samps <- rnorm(1000, mean=post_samples$a + post_samples$b*46.95,sd=post_samples$sd)
mean(height1_samps)
PI(height1_samps, 0.89)
post_mean <- apply(sim_height, 2, mean)
mu_PI <- apply(sim_height, 2, PI, prob=0.89)
mu_PI
## 27.1 units taller (26.0-28.2)
extract.samples(q4H2)
mean(post_samples$b*10)
## 27.1 units taller (26.0-28.2)
post_samples <- extract.samples(q4H2)
mean(post_samples$b*10)
PI(post_samples$b*10,c(0.05,0.94))
quantile(post_samples$b, c(0.05,0.94))
PI(post_samples$b*10,0.89)
quantile(post_samples$b, c(0.05,0.94))
quantile(post_samples$b*10, c(0.05,0.94))
ggplot(d) +
geom_point(aes(x=weight,y=height))
ests
ggplot(d) +
geom_point(aes(x=weight,y=height)) +
geom_abline(x=seq(0,50,by=1),y=ests$mean[1] + ests$mean[2]*height)
ggplot(d) +
geom_point(aes(x=weight,y=height)) +
geom_abline(x=seq(0,50,by=1),y=ests$mean[1] + ests$mean[2]*seq(0,50,by=1))
ggplot(d) +
geom_point(aes(x=weight,y=height)) +
geom_abline(data=data.frame(x=seq(0,50,by=1),y=ests$mean[1] + ests$mean[2]*seq(0,50,by=1)),aes(x=x,y=y))
ggplot(d) +
geom_point(aes(x=weight,y=height)) +
geom_line(data=data.frame(x=seq(0,50,by=1),y=ests$mean[1] + ests$mean[2]*seq(0,50,by=1)),aes(x=x,y=y))
MAP_line <- tibble(weights=seq(0,50,by=1),heights=mean(post_samples$a) + mean(post_samples$b)*seq(0,50,by=1))
ggplot(d) +
geom_point(aes(x=weight,y=height)) +
geom_line(data=MAP_line,aes(x=weights,y=heights))
sims <- sim(q4H2, data=data.frame(weights=seq(0,50,by=1)))
sims <- sim(q4H2, data=data.frame(weight=seq(0,50,by=1)))
sims
mu_4H2 <- link(q4H2, data=data.frame(weight=seq(0,50,by=1)))
mu_4H2
mu_PIs <- apply(mu_4H2, 2, PI, prob=0.89)
mu_PIs
mu_PIs <- t(apply(mu_4H2, 2, PI, prob=0.89))
plot(d$height~d$weight)
lines(MAP_line)
shade(mu_PIs)
mu_PIs <- apply(mu_4H2, 2, PI, prob=0.89)
shade(mu_PIs,seq(0,50,by=1))
sims <- apply(sim(q4H2, data=data.frame(weight=seq(0,50,by=1))),2,PI, prob=0.89)
shade(sims, seq(0,50,by=1))
d <- Howell1
nrow(d)
mod <- alist(
height ~ dnorm(mu, sd),
mu <- a + b*log(weight),
a <- dnorm(178, 20),
b <- dlnorm(0, 1),
sd <- runif(0,50)
)
quap(mod, data=d)
mod <- alist(
height ~ dnorm(mu, sd),
mu <- a + b*log(weight),
a <- dnorm(178, 20),
b <- dlnorm(0, 1),
sd <- runif(0,50)
)
quap(mod, d)
d
head(d)
mod <- alist(
height ~ dnorm(mu, sd),
mu <- a + b*log(weight),
a <- dnorm(178, 20),
b <- dlnorm(0, 1),
sd <- runif(0,50)
)
quap(mod, d)
?quap
mod
mod <- alist(
height ~ dnorm(mu, sd),
mu <- a + b*log(weight),
a <- dnorm(178, 20),
b <- dlnorm(0, 1),
sd <- dunif(0,50)
)
quap(mod, d)
fit <- quap(mod, d)
precis(fit)
plot( height ~ weight , data=Howell1 ,
col=col.alpha(rangi2,0.4) )
weights_all <- seq(from = min(d$weight), to = max(d$weight), by = 1)
weights_all <- seq(from = min(d$weight), to = max(d$weight), by = 1)
mu_pred <- link(fit, data = data.frame(weight = weight.seq))
warnings()
mu_pred
weights_all <- log(seq(from = min(d$weight), to = max(d$weight), by = 1))
mu_pred <- link(fit, data = data.frame(weight = weight.seq))
mu_pred <- link(mod, data = data.frame(weight = weight.seq))
weights_all <- seq(from = min(d$weight), to = max(d$weight), by = 1)
mu_pred <- link(mod, data = data.frame(weight = weight.seq))
mu_pred
mu_pred <- link(fit, data = data.frame(weight = weight.seq))
mu_pred
min(d$weight)
max(d$weight)
weights_all <- seq(0,70,by=1)
mu_pred <- link(fit, data = data.frame(weight = weight.seq))
fit <- quap(mod, d)
weights_all <- seq(0,70,by=1)
mu_pred <- link(fit, data = data.frame(weight = weight.seq))
apply(mu_pred, 2, mean)
exp(apply(mu_pred, 2, mean))
lines(exp(apply(mu_pred, 2, mean)))
posterior_samps <- extract.samples(fit)
posterior_samps
link(fit, data=data.frame(weight=seq(0,70,by=1)))
means <- apply(link(fit, data=data.frame(weight=seq(0,70,by=1))),2,mean)
quants <- apply(link(fit, data=data.frame(weight=seq(0,70,by=1))),2,PI, prob=0.97)
lines(means)
plot( height ~ weight , data=Howell1 ,
col=col.alpha(rangi2,0.4) )
weights_all <- seq(0,70,by=1)
posterior_samps <- extract.samples(fit)
means <- apply(link(fit, data=data.frame(weight=seq(0,70,by=1))),2,mean)
quants <- apply(link(fit, data=data.frame(weight=seq(0,70,by=1))),2,PI, prob=0.97)
lines(means)
shade(quants)
shade(quants, weights_all)
plot( height ~ weight , data=Howell1 ,
col=col.alpha(rangi2,0.4) )
weights_all <- seq(0,70,by=1)
posterior_samps <- extract.samples(fit)
means <- apply(link(fit, data=data.frame(weight=seq(0,70,by=1))),2,mean)
quants <- apply(link(fit, data=data.frame(weight=seq(0,70,by=1))),2,PI, prob=0.97)
lines(means, weights_all)
shade(quants, weights_all)
means
lines(means, weights_all)
?lines
means
lines(means~weights_all)
lines(means[2:length(means)]~weights_all[2:length(weights_all)])
shade(quants, weights_all)
sims <- sim(fit, data=data.frame(weight=weights_all))
shade(apply(sims, 2, PI, prob=0.97))
shade(apply(sims, 2, PI, prob=0.97),weights_all)
source('~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/fitting_scripts/fit_data_multivariate_hinge_swab.R', echo=TRUE)
source('~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/sim_scripts/simulate_data_hinge_swab_new.R', echo=TRUE)
p_comb | pC
load(paste0("figs/p_",run_name,".RData"))
load(paste0("figs/p_onset_",run_name,".RData"))
p_comb | pC
p_comb_onset | pC
library(patchwork)
p_comb | pC
p_comb_onset | pC
load(paste0("figs/p_",run_name,".RData"))
p_comb
paste0("figs/p_",run_name,".RData")
p_comb <- p_draws / prop_detect
save(p_comb,file=paste0("p_",run_name,".RData"))
load(paste0("figs/p_",run_name,".RData"))
p_comb | pC
p_comb
p_comb <- p_draws / prop_detect
p_comb
#dev.off()
#png(paste0(run_name,"_onset_draws.png"),width=8,height=8,res=300,units="in")
p_comb_onset
p_comb_onset <- (p_draws_onset + prop_detect_onset) + plot_layout(ncol=1)
p_comb_onset
p_comb <- (p_draws + prop_detect) + plot_layout(ncol=1)
save(p_comb,file=paste0("p_",run_name,".RData"))
save(p_comb_onset,file=paste0("p_onset_",run_name,".RData"))
load(paste0("figs/p_",run_name,".RData"))
p_comb
p_comb <- (p_draws + prop_detect) + plot_layout(ncol=1)
p_comb_onset <- (p_draws_onset + prop_detect_onset) + plot_layout(ncol=1)
pdf(paste0("sims/",run_name,"_sim.pdf"),height=6,width=8)
p_comb | pC
dev.off()
pdf(paste0("sims/",run_name,"_onset_sim.pdf"),height=6,width=8)
p_comb_onset | pC
dev.off()
p1 <- epidemic_process$incidence_plot + geom_vline(xintercept=c(75,125,175),linetype="dashed")
p1
plot_t <- c(80, 110, 220)
obs_vl_melted_tmp <- obs_vl_melted %>%
filter(t %in% plot_t) %>%
filter(ct < 40)
t_label <- c("80"="Early","110"="Peak","220"="Late")
obs_vl_melted_tmp$t <- as.character(obs_vl_melted_tmp$t)
obs_vl_melted_tmp$t <- t_label[obs_vl_melted_tmp$t]
obs_vl_melted_tmp$t <- factor(obs_vl_melted_tmp$t, levels=c("Early","First decline","Second rise"))
pC <- obs_vl_melted_tmp %>% ggplot() +
geom_histogram(aes(x=ct),binwidth=1,fill="grey70",col="black") +
facet_wrap(~t,scales="free_y",ncol=1) +
scale_x_continuous(breaks=seq(0,40,by=5),trans="reverse") +
geom_hline(yintercept=0) +
ylab("Count") +
xlab("Ct") +
theme_pubr() +
theme(plot.tag=element_text(vjust=-3)) +
labs(tag="C")
p_comb | pC
obs_vl_melted <- reshape2::melt(simulated_data$obs[seq(1, min(1000000, nrow(simulated_data$obs)),by=1),])
colnames(obs_vl_melted) <- c("i","t","obs")
obs_vl_melted <- as_tibble(obs_vl_melted)
obs_vl_melted <- obs_vl_melted %>% mutate(ct = 40 - log2(10)*obs,ct = pmax(0, ct),t = t - 1)
plot_t <- c(80, 110, 220)
obs_vl_melted_tmp <- obs_vl_melted %>%
filter(t %in% plot_t) %>%
filter(ct < 40)
t_label <- c("80"="Early","110"="Peak","220"="Late")
obs_vl_melted_tmp$t <- as.character(obs_vl_melted_tmp$t)
obs_vl_melted_tmp$t <- t_label[obs_vl_melted_tmp$t]
obs_vl_melted_tmp$t <- factor(obs_vl_melted_tmp$t, levels=c("Early","First decline","Second rise"))
pC <- obs_vl_melted_tmp %>% ggplot() +
geom_histogram(aes(x=ct),binwidth=1,fill="grey70",col="black") +
facet_wrap(~t,scales="free_y",ncol=1) +
scale_x_continuous(breaks=seq(0,40,by=5),trans="reverse") +
geom_hline(yintercept=0) +
ylab("Count") +
xlab("Ct") +
theme_pubr() +
theme(plot.tag=element_text(vjust=-3)) +
labs(tag="C")
pC
obs_vl_melted <- reshape2::melt(simulated_data$obs[seq(1, min(1000000, nrow(simulated_data$obs)),by=1),])
colnames(obs_vl_melted) <- c("i","t","obs")
obs_vl_melted <- as_tibble(obs_vl_melted)
obs_vl_melted <- obs_vl_melted %>% mutate(ct = 40 - log2(10)*obs,ct = pmax(0, ct),t = t - 1)
plot_t <- c(80, 110, 220)
obs_vl_melted_tmp <- obs_vl_melted %>%
filter(t %in% plot_t) %>%
filter(ct < 40)
p_comb | pC
plot_t <- c(80, 110, 220)
obs_vl_melted_tmp <- obs_vl_melted %>%
filter(t %in% plot_t) %>%
filter(ct < 40)
t_label <- c("80"="Early","110"="Peak","220"="Late")
obs_vl_melted_tmp$t <- as.character(obs_vl_melted_tmp$t)
obs_vl_melted_tmp$t <- t_label[obs_vl_melted_tmp$t]
obs_vl_melted_tmp$t <- factor(obs_vl_melted_tmp$t, levels=c("Early","Peak","Late"))
pC <- obs_vl_melted_tmp %>% ggplot() +
geom_histogram(aes(x=ct),binwidth=1,fill="grey70",col="black") +
facet_wrap(~t,scales="free_y",ncol=1) +
scale_x_continuous(breaks=seq(0,40,by=5),trans="reverse") +
geom_hline(yintercept=0) +
ylab("Count") +
xlab("Ct") +
theme_pubr() +
theme(plot.tag=element_text(vjust=-3)) +
labs(tag="C")
p_comb | pC
obs_vl_melted <- reshape2::melt(simulated_data$obs[seq(1, min(1000000, nrow(simulated_data$obs)),by=1),])
colnames(obs_vl_melted) <- c("i","t","obs")
obs_vl_melted <- as_tibble(obs_vl_melted)
obs_vl_melted <- obs_vl_melted %>% mutate(ct = 40 - log2(10)*obs,ct = pmax(0, ct),t = t - 1)
plot_t <- c(80, 110, 220)
obs_vl_melted_tmp <- obs_vl_melted %>%
filter(t %in% plot_t) %>%
filter(ct < 40)
t_label <- c("80"="Early","110"="Peak","220"="Late")
obs_vl_melted_tmp$t <- as.character(obs_vl_melted_tmp$t)
obs_vl_melted_tmp$t <- t_label[obs_vl_melted_tmp$t]
obs_vl_melted_tmp$t <- factor(obs_vl_melted_tmp$t, levels=c("Early","Peak","Late"))
pC <- obs_vl_melted_tmp %>% ggplot() +
geom_histogram(aes(x=ct),binwidth=1,fill="grey70",col="black") +
facet_wrap(~t,scales="free_y",ncol=1) +
scale_x_continuous(breaks=seq(0,40,by=5),trans="reverse") +
geom_hline(yintercept=0) +
ylab("Count") +
xlab("Ct") +
theme_pubr() +
theme(plot.tag=element_text(vjust=-3)) +
labs(tag="C")
pC
## Sample size
n <- 125000/5
## Duration of epidemic in days
times <- 0:365
run_name <- "swab"
shift_twane <- 0 ## Can make the waning duration average shift_twane days longer
## Viral kinetics pars
## Change wd to local path
parTab <- read.csv("~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/pars/partab_multivariate_hinge.csv",stringsAsFactors=FALSE)
chains <- load_mcmc_chains(paste0("~/Google Drive/nCoV/pool_samples/chains_swab"), parTab,
FALSE, 100, burnin=1000000,multi=TRUE)
chain <- as.data.frame(chains[[2]])
chain$sampno <- 1:nrow(chain)
chain$wane_mean <- chain$wane_mean + shift_twane
## Simulate the epidemic process
seir_pars <- c("R0"=2.5,"gamma"=1/7,"sigma"=1/6.4,"I0"=100,"recovered0"=0)
nsims <- 5
## Manage MCMC runs and parallel runs
n_clusters <- 5
cl <- parallel::makeCluster(n_clusters, setup_strategy = "sequential")
registerDoParallel(cl)
res <- foreach(simno=1:nsims,.packages = c("tidyverse","rethinking","odin","data.table")) %dopar% {
source("~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/functions/odin_funcs.R")
par_file <- paste0("sims/",run_name,"/used_pars_",run_name,"_",simno,".csv")
vl_file <- paste0("sims/",run_name,"/seir_viral_loads_",run_name,"_",simno,".csv")
obs_file <- paste0("sims/",run_name,"/seir_obs_viral_loads_",run_name,"_",simno,".csv")
epidemic_process <- simulate_seir_process(population_n,seir_pars,times,ver="normal",beta_smooth=0.5,stochastic = TRUE)
## Simulate infection times
infection_times <- simulate_infection_times(n, epidemic_process$overall_prob_infection,
epidemic_process$incidence)
infection_times_dat <- tibble(i=seq_along(infection_times), inf_time=infection_times)
## Simulate viral loads for the sample population
## <0.2% of simulated viral loads are 11 or higher
simulated_data <- simulate_viral_loads_hinge(infection_times, times, chain, parTab,save_during=TRUE,
save_block=100000,vl_file=vl_file,obs_file=obs_file,par_file=par_file,
add_noise=TRUE,max_vl=11,simno=simno)
list(simulated_data, infection_times_dat, epidemic_process)
}
simulated_data <- res[[1]][[1]]
infection_times_dat <- res[[1]][[2]]
epidemic_process <- res[[1]][[3]]
viral_loads <- simulated_data$viral_loads
viral_loads_tmp <- viral_loads[1:100,]
viral_loads_melted <- reshape2::melt(viral_loads_tmp)
colnames(viral_loads_melted) <- c("i","t","viral_load")
viral_loads_melted <- as_tibble(viral_loads_melted) %>% left_join(infection_times_dat)
viral_loads_melted <- viral_loads_melted %>% filter(inf_time >= 0) %>% arrange(-inf_time,i, t)
viral_loads_melted$i <- match(viral_loads_melted$i, unique(viral_loads_melted$i))
obs_dat <- simulated_data$obs
obs_vl_tmp <- obs_dat[1:100,]
obs_vl_melted <- reshape2::melt(obs_vl_tmp)
colnames(obs_vl_melted) <- c("i","t","obs")
obs_vl_melted <- as_tibble(obs_vl_melted) %>% left_join(infection_times_dat)
obs_vl_melted <- obs_vl_melted %>% filter(inf_time >= 0) %>% arrange(-inf_time,i, t)
obs_vl_melted$i <- match(obs_vl_melted$i, unique(obs_vl_melted$i))
p_obs_traj <- ggplot(obs_vl_melted %>% mutate(t = t-inf_time) %>% filter(t >0 & t < 50)%>%
filter(i %in% sample(unique(obs_vl_melted$i), pmin(length(unique(obs_vl_melted$i)),25)))) +
geom_line(aes(x=t,y=obs,group=i),size=0.25) +
theme_bw() +
ylab("log10 viral load") + xlab("Time")
p_obs_traj
p_obs <- ggplot(obs_vl_melted) +
geom_tile(aes(x=t,y=i,fill=obs)) +
scale_fill_viridis_c() +
theme_bw() +
ylab("Individual") + xlab("Time")
pdf(paste0("sims/",run_name,"_observed_vls.pdf"),height=5,width=6)
p_obs
dev.off()
png(paste0("sims/",run_name,"_observed_vls.png"),height=5,width=6,res=300,units="in")
p_obs
dev.off()
p_vl <- ggplot(viral_loads_melted) +
geom_tile(aes(x=t,y=i,fill=viral_load)) +
scale_fill_viridis_c() +
theme_bw() +
ylab("Individual") + xlab("Time")
obs_vl_melted <- reshape2::melt(simulated_data$obs[seq(1, min(1000000, nrow(simulated_data$obs)),by=1),])
colnames(obs_vl_melted) <- c("i","t","obs")
obs_vl_melted <- as_tibble(obs_vl_melted)
obs_vl_melted <- obs_vl_melted %>% mutate(ct = 40 - log2(10)*obs,ct = pmax(0, ct),t = t - 1)
plot_t <- c(80, 110, 220)
obs_vl_melted_tmp <- obs_vl_melted %>%
filter(t %in% plot_t) %>%
filter(ct < 40)
t_label <- c("80"="Early","110"="Peak","220"="Late")
obs_vl_melted_tmp$t <- as.character(obs_vl_melted_tmp$t)
obs_vl_melted_tmp$t <- t_label[obs_vl_melted_tmp$t]
obs_vl_melted_tmp$t <- factor(obs_vl_melted_tmp$t, levels=c("Early","Peak","Late"))
pC <- obs_vl_melted_tmp %>% ggplot() +
geom_histogram(aes(x=ct),binwidth=1,fill="grey70",col="black") +
facet_wrap(~t,scales="free_y",ncol=1) +
scale_x_continuous(breaks=seq(0,40,by=5),trans="reverse") +
geom_hline(yintercept=0) +
ylab("Count") +
xlab("Ct") +
theme_pubr() +
theme(plot.tag=element_text(vjust=-3)) +
labs(tag="C")
pC
p_comb | pC
p_comb_onset | pC
p1 <- epidemic_process$incidence_plot + geom_vline(xintercept=plot_t,linetype="dashed")
p1
which.max(epidemic_process$incidence)
which.max(epidemic_process$incidence)
plot_t <- c(97, 127, 157)
obs_vl_melted_tmp <- obs_vl_melted %>%
filter(t %in% plot_t) %>%
filter(ct < 40)
t_label <- c("97"="Early","127"="Peak","157"="Late")
obs_vl_melted_tmp$t <- as.character(obs_vl_melted_tmp$t)
obs_vl_melted_tmp$t <- t_label[obs_vl_melted_tmp$t]
obs_vl_melted_tmp$t <- factor(obs_vl_melted_tmp$t, levels=c("Early","Peak","Late"))
pC <- obs_vl_melted_tmp %>% ggplot() +
geom_histogram(aes(x=ct),binwidth=1,fill="grey70",col="black") +
facet_wrap(~t,scales="free_y",ncol=1) +
scale_x_continuous(breaks=seq(0,40,by=5),trans="reverse") +
geom_hline(yintercept=0) +
ylab("Count") +
xlab("Ct") +
theme_pubr() +
theme(plot.tag=element_text(vjust=-3)) +
labs(tag="C")
pC
p_comb | pC
p_comb_onset | pC
p1 <- epidemic_process$incidence_plot + geom_vline(xintercept=plot_t,linetype="dashed")
p1
run_name
simno <- 1
par_file <- paste0("sims/",run_name,"/used_pars_",run_name,"_",simno,".csv")
vl_file <- paste0("sims/",run_name,"/seir_viral_loads_",run_name,"_",simno,".csv")
obs_file <- paste0("sims/",run_name,"/seir_obs_viral_loads_",run_name,"_",simno,".csv")
par_file
source('~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/sim_scripts/simulate_data_hinge_swab_new.R', echo=TRUE)
source('~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/fitting_scripts/fit_data_multivariate_hinge_swab.R', echo=TRUE)
png(paste0("plots/swab_sims.png"),width=8,height=8,res=300,units="in")
p_draws/prop_detect_onset
dev.off()
pdf(paste0("plots/swab_sims.pdf"),width=8,height=8)
p_draws/prop_detect_onset
dev.off()
png(paste0("plots/",run_name,"_fit.png"),width=8,height=6,res=300,units="in")
p_swab
dev.off()
source('~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/sim_scripts/simulate_data_hinge_swab_new.R', echo=TRUE)
source('~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/sim_scripts/simulate_data_hinge_swab_new.R', echo=TRUE)
png(paste0("plots/",run_name,"_draws.png"),width=8,height=8,res=300,units="in")
p_comb
dev.off()
png(paste0("plots/",run_name,"_onset_draws.png"),width=8,height=8,res=300,units="in")
p_comb_onset
dev.off()
## Simulate infection times
infection_times <- simulate_infection_times(n, epidemic_process$overall_prob_infection,
epidemic_process$incidence)
simulate_infection_times
p_infected <- epidemic_process$overall_prob_infection
incidence <- epidemic_process$incidence
n <- 100000
scaled_incidence <- incidence/sum(incidence)
are_infected <- numeric(n)
infection_times <- numeric(n)
are_infected
rbinom(n, 1, p_infected)
are_infected <- rbinom(n, 1, p_infected)
are_infected[are_infected < 1] <- -1
t_inf <- sample(1:length(incidence), n, prob=scaled_incidence)
t_inf <- sample(1:length(incidence), n, prob=scaled_incidence,replace=TRUE)
t_inf
hist(t_inf)
t_inf*are_infected
simulate_infection_times <- function(n, p_infected, incidence){
scaled_incidence <- incidence/sum(incidence)
are_infected <- rbinom(n,1,p_infected)
t_inf <- sample(1:length(incidence), n, prob=scaled_incidence,replace=TRUE)
are_infected[are_infected < 1] <- -1
infection_times <- t_inf * are_infected
infection_times[infection_times < 0] <- -1
return(infection_times)
}
## Simulate infection times
infection_times <- simulate_infection_times(n, epidemic_process$overall_prob_infection,
epidemic_process$incidence)
infection_times
hist(infection_times)
simulate_infection_times <- function(n, p_infected, incidence){
scaled_incidence <- incidence/sum(incidence)
are_infected <- numeric(n)
infection_times <- numeric(n)
for(i in 1:n){
infection <- rbinom(1,1, p_infected)
are_infected[i] <- infection
if(infection == 1){
t_inf <- sample(1:length(incidence), 1, prob=scaled_incidence)
infection_times[i] <- t_inf
} else {
infection_times[i] <- -1
}
}
return(infection_times)
}
simulate_infection_times1 <- function(n, p_infected, incidence){
scaled_incidence <- incidence/sum(incidence)
are_infected <- rbinom(n,1,p_infected)
t_inf <- sample(1:length(incidence), n, prob=scaled_incidence,replace=TRUE)
are_infected[are_infected < 1] <- -1
infection_times <- t_inf * are_infected
infection_times[infection_times < 0] <- -1
return(infection_times)
}
## Simulate infection times
infection_times <- simulate_infection_times(n, epidemic_process$overall_prob_infection,
epidemic_process$incidence)
## Simulate infection times
infection_times1 <- simulate_infection_times1(n, epidemic_process$overall_prob_infection,
epidemic_process$incidence)
hist(infection_times)
hist(infection_times1)
source('~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/sim_scripts/simulate_data_hinge_swab_new.R', echo=TRUE)
