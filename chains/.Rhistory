registerDoParallel(cl)
filenames <- paste0("drosten_data_", 1:3)
n_indiv <- 9
parTab <- read.csv("partab.csv",stringsAsFactors=FALSE)
## Read in extracted Wolfel data
viral_loads_dat <- read.csv("drosten_data.csv")
ggplot(viral_loads_dat) + geom_line(aes(x=t,y=obs)) + facet_wrap(~i)
viral_loads_dat <- viral_loads_dat[,c("t","obs","i")]
## Run MCMC
mcmcPars1 <- c("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
mcmcPars2 <- c("iterations"=200000,"popt"=0.234,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
n_temperatures <- 1
mcmcPars <- list("iterations"=100000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=50000,"save_block"=500,"temperature" = seq(1,100,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 50000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 100000)
startTab <- generate_start_tab(parTab)
f <- create_func_indivs(parTab, viral_loads_dat,ver="posterior")
setwd("chains")
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
x
startTab[[]]
startTab[[1]]
startTab
n_temperatures <- 2
mcmcPars <- list("iterations"=100000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=50000,"save_block"=500,"temperature" = seq(1,100,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 50000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 100000)
startTab <- generate_start_tab(parTab)
f(parTab$values)
setwd("chains")
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
x
traceback()
debugSource('~/Documents/GitHub/lazymcmc/R/mcmc.R', echo=TRUE)
source('~/Documents/GitHub/lazymcmc/R/mcmc.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
start_pars
parallel_tempering_flag
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
start_pars
source('~/Documents/GitHub/lazymcmc/R/mcmc.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
current_pars
steps
start_pars
posterior_simp(start_pars[[1]])
posterior_simp(start_pars[[2]])
probab
misc
temperatures
par_i
posterior_out$misc
posterior_out <- posterior_simp(start_pars[[1]])
posterior_out$lik
posterior_out
source('~/Google Drive/nCoV/pool_samples/model_funcs.R', echo=TRUE)
source('~/Documents/GitHub/lazymcmc/R/mcmc.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
traceback()
source('~/Google Drive/nCoV/pool_samples/model_funcs.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
source('~/Documents/GitHub/lazymcmc/R/mcmc.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
misc
probab
posterior_simp(strt_pars[[1]])
posterior_simp(start_pars[[1]])
posterior_out <- posterior_simp(start_pars[[1]])
posterior_out$misc
posterior_out$lik
source('~/Google Drive/nCoV/pool_samples/model_funcs.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
misc
probab
source('~/Documents/GitHub/lazymcmc/R/mcmc.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
x
## Check convergence
chain <- read.csv(x$file)
plot(coda::as.mcmc(chain))
n_temperatures <- 5
mcmcPars <- list("iterations"=100000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=50000,"save_block"=500,"temperature" = seq(1,100,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 50000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 100000)
startTab <- generate_start_tab(parTab)
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
## Check convergence
chain <- read.csv(x$file)
plot(coda:aAs.mcmc(chain))
plot(coda::as.mcmc(chain))
plot(coda::as.mcmc(chain[chain$sampno > 50000,]))
source('~/Google Drive/nCoV/pool_samples/model_funcs.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
## Check convergence
chain <- read.csv(x$file)
plot(coda::as.mcmc(chain[chain$sampno > 50000,]))
source('~/Google Drive/nCoV/pool_samples/model_funcs.R', echo=TRUE)
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
## Check convergence
chain <- read.csv(x$file)
plot(coda::as.mcmc(chain[chain$sampno > 50000,]))
n_temperatures <- 10
mcmcPars <- list("iterations"=100000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=50000,"save_block"=500,"temperature" = seq(1,100,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 50000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 100000)
x
x$temperatures
n_temperatures <- 10
mcmcPars <- list("iterations"=100000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=50000,"save_block"=500,"temperature" = seq(1,100,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 50000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 100000)
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
## Check convergence
chain <- read.csv(x$file)
plot(coda::as.mcmc(chain[chain$sampno > 50000,]))
## Check convergence
chain <- read.csv(x$file)
best_pars <- get_best_pars(chain)
chain <- chain[chain$sampno >= mcmcPars1["adaptive_period"],2:(ncol(chain)-1)]
covMat <- cov(chain)
mvrPars <- list(covMat,1,w=0.8)
## Run second chain
output <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2, mvrPars=mvrPars)
output
mvrPars
## Run second chain
output <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2, mvrPars=mvrPars)
output
startTab
## Check convergence
chain <- read.csv(x$file)
best_pars <- get_best_pars(chain)
chain <- chain[chain$sampno >= mcmcPars1["adaptive_period"],2:(ncol(chain)-1)]
covMat <- cov(chain)
mvrPars <- list(covMat,1,w=0.8)
## Run second chain
output <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2, mvrPars=mvrPars)
traceback()
output
length(mvrPars)
x$temperatures
mcmcPars <- list("iterations"=100000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=50000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 50000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 100000)
n_temperatures <- 25
mcmcPars <- list("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 100000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 3000000)
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
chain <- read.csv(x$file)
plot(coda::as.mcmc(chain))
plot(coda::as.mcmc(chain[chain$sampno > 100000,]))
prior_func <- function(pars){
to_test <- pars["viral_peak_sd"]
prior <- dnorm(to_test, 0.1, 0.1, TRUE)
prior
}
names(pars) <- parTab$names
pars <- parTab$values
names(pars) <- parTab$names
to_test <- pars["viral_peak_sd"]
prior <- dnorm(to_test, 0.1, 0.1, TRUE)
hist(rnorm(1000, 0.1, 0.1))
par(ask=FALSE, mfrow=c(1,1))
hist(rnorm(1000, 0.1, 0.1))
hist(rnorm(1000, 0.1, 1))
hist(chain$viral_peak_sd)
parTab[parTab$names == "viral_peak_sd", "lower_bound"] <- 0.01
mcmcPars <- list("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 100000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 3000000)
startTab <- generate_start_tab(parTab)
prior_func <- function(pars){
names(pars) <- parTab$names
to_test <- pars["viral_peak_sd"]
prior <- dnorm(to_test, 0.1, 0.1, TRUE)
prior
}
f <- create_func_indivs(parTab, viral_loads_dat,ver="posterior")
f(parTab$values)
setwd("chains")
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
n_temperatures
n_temperatures <- 1
parTab[parTab$names == "viral_peak_sd", "lower_bound"] <- 0.01
mcmcPars <- list("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 100000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 3000000)
startTab <- generate_start_tab(parTab)
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
x
startTab <- generate_start_tab(parTab)
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
x
startTab
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
startTab
startTab[startTab$values > startTab$upper_bound,]
parTab
filenames <- paste0("drosten_data_", 1:3)
n_indiv <- 9
parTab <- read.csv("partab.csv",stringsAsFactors=FALSE)
## Read in extracted Wolfel data
viral_loads_dat <- read.csv("drosten_data.csv")
setwd("~/Google Drive/nCoV/pool_samples/")
source("model_funcs.R")
n_clusters <- 3
cl <- makeCluster(n_clusters)
registerDoParallel(cl)
filenames <- paste0("drosten_data_", 1:3)
n_indiv <- 9
parTab <- read.csv("partab.csv",stringsAsFactors=FALSE)
## Read in extracted Wolfel data
viral_loads_dat <- read.csv("drosten_data.csv")
ggplot(viral_loads_dat) + geom_line(aes(x=t,y=obs)) + facet_wrap(~i)
viral_loads_dat <- viral_loads_dat[,c("t","obs","i")]
## Run MCMC
mcmcPars1 <- c("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
mcmcPars2 <- c("iterations"=200000,"popt"=0.234,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
n_temperatures <- 1
parTab[parTab$names == "viral_peak_sd", "lower_bound"] <- 0.01
mcmcPars <- list("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 100000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 3000000)
startTab <- generate_start_tab(parTab)
setwd("chains")
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
x
parTab
parTab[parTab$values > parTab$upper_bound]
parTab[parTab$values > parTab$upper_bound,]
startTab[startTab$values > parTab$upper_bound,]
startTab <- generate_start_tab(parTab)
startTab
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
startTab[startTab$values > parTab$upper_bound,]
x
n_temperatures <- 2
parTab[parTab$names == "viral_peak_sd", "lower_bound"] <- 0.01
mcmcPars <- list("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 100000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 3000000)
startTab <- generate_start_tab(parTab)
setwd("chains")
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
chain <- read.csv(x$file)
plot(coda::as.mcmc(chain))
plot(coda::as.mcmc(chain[chain$sampno > 20000,]))
mean(chain$viral_peak_sd)
startTab
source("model_funcs.R")
n_clusters <- 3
cl <- makeCluster(n_clusters)
registerDoParallel(cl)
## Choose working directory
#setwd("~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/")
filenames <- paste0("drosten_data_", 1:3)
n_indiv <- 9
parTab <- read.csv("partab.csv",stringsAsFactors=FALSE)
## Read in extracted Wolfel data
viral_loads_dat <- read.csv("drosten_data.csv")
ggplot(viral_loads_dat) + geom_line(aes(x=t,y=obs)) + facet_wrap(~i)
viral_loads_dat <- viral_loads_dat[,c("t","obs","i")]
## Run MCMC
mcmcPars1 <- c("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
mcmcPars2 <- c("iterations"=200000,"popt"=0.234,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
n_temperatures <- 2
parTab[parTab$names == "viral_peak_sd", "lower_bound"] <- 0.01
parTab[parTab$names == "viral_peak_sd", "values"] <- 0.9
parTab[parTab$names == "viral_peak_sd", "fixed"] <- 1
mcmcPars <- list("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 100000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 3000000)
startTab <- generate_start_tab(parTab)
setwd("~/Google Drive/nCoV/pool_samples/")
source("model_funcs.R")
n_clusters <- 3
cl <- makeCluster(n_clusters)
registerDoParallel(cl)
## Choose working directory
#setwd("~/Documents/GitHub/covid19-group-tests/code/viral_kinetics/")
filenames <- paste0("drosten_data_", 1:3)
n_indiv <- 9
parTab <- read.csv("partab.csv",stringsAsFactors=FALSE)
## Read in extracted Wolfel data
viral_loads_dat <- read.csv("drosten_data.csv")
ggplot(viral_loads_dat) + geom_line(aes(x=t,y=obs)) + facet_wrap(~i)
viral_loads_dat <- viral_loads_dat[,c("t","obs","i")]
## Run MCMC
mcmcPars1 <- c("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
mcmcPars2 <- c("iterations"=200000,"popt"=0.234,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=1000)
n_temperatures <- 2
parTab[parTab$names == "viral_peak_sd", "lower_bound"] <- 0.01
parTab[parTab$names == "viral_peak_sd", "values"] <- 0.9
parTab[parTab$names == "viral_peak_sd", "fixed"] <- 1
mcmcPars <- list("iterations"=200000,"popt"=0.44,"opt_freq"=1000,
"thin"=10,"adaptive_period"=100000,"save_block"=500,"temperature" = seq(1,251,length.out=n_temperatures),
"parallel_tempering_iter" = 5,"max_adaptive_period" = 100000,
"adaptiveLeeway" = 0.2, "max_total_iterations" = 3000000)
startTab <- generate_start_tab(parTab)
setwd("chains")
startTab <- parTab
## Generate random starting conditions for the chain
## Note that a list of starting tables is created,
## one for each temperature chain
if(n_temperatures > 1){
startTab <- rep(list(startTab),n_temperatures)
for(j in 1:length(startTab)){
for(i in which(parTab$fixed == 0)){
startTab[[j]][i,"values"] <- runif(1,startTab[[j]][i,"lower_bound"],startTab[[j]][i,"upper_bound"])
}
}
}
x <- run_MCMC(startTab, viral_loads_dat, mcmcPars=mcmcPars,filename=filenames[i],
CREATE_POSTERIOR_FUNC = create_func_indivs,PRIOR_FUNC=NULL,ver="posterior",
OPT_TUNING=0.2)
chain <- read.csv(x$file)
plot(coda::as.mcmc(chain))
plot(coda::as.mcmc(chain[chain$sampno > 50000,]))
